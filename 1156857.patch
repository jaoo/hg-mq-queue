# HG changeset patch
# User Georg Fritzsche <georg.fritzsche@googlemail.com>
# Date 1430232892 -7200
#      Tue Apr 28 16:54:52 2015 +0200
# Node ID 9767f1868844464ec0590e8d727a2ebed8d34a02
# Parent  2f6583f177c62f0ad395703f6b21f8c8fbbc9fb4
Bug 1156857 - Fix StatisticsRecorder not being initialized in content processes.

diff --git a/toolkit/xre/nsEmbedFunctions.cpp b/toolkit/xre/nsEmbedFunctions.cpp
--- a/toolkit/xre/nsEmbedFunctions.cpp
+++ b/toolkit/xre/nsEmbedFunctions.cpp
@@ -71,16 +71,18 @@
 #include "mozilla/ipc/XPCShellEnvironment.h"
 #include "mozilla/WindowsDllBlocklist.h"
 
 #include "GMPProcessChild.h"
 #include "GMPLoader.h"
 
 #include "GeckoProfiler.h"
 
+ #include "base/histogram.h"
+
 #if defined(MOZ_SANDBOX) && defined(XP_WIN)
 #define TARGET_SANDBOX_EXPORTS
 #include "mozilla/sandboxing/loggingCallbacks.h"
 #endif
 
 #ifdef MOZ_IPDL_TESTS
 #include "mozilla/_ipdltest/IPDLUnitTests.h"
 #include "mozilla/_ipdltest/IPDLUnitTestProcessChild.h"
@@ -132,22 +134,26 @@ XRE_LockProfileDirectory(nsIFile* aDirec
                                    getter_AddRefs(lock));
   if (NS_SUCCEEDED(rv))
     NS_ADDREF(*aLockObject = lock);
 
   return rv;
 }
 
 static int32_t sInitCounter;
+static UniquePtr<base::StatisticsRecorder> gStatisticsRecorder;
 
 nsresult
 XRE_InitEmbedding2(nsIFile *aLibXULDirectory,
 		   nsIFile *aAppDirectory,
 		   nsIDirectoryServiceProvider *aAppDirProvider)
 {
+  // This is needed by Telemetry to initialize histogram collection.
+  gStatisticsRecorder = MakeUnique<base::StatisticsRecorder>();
+
   // Initialize some globals to make nsXREDirProvider happy
   static char* kNullCommandLine[] = { nullptr };
   gArgv = kNullCommandLine;
   gArgc = 0;
 
   NS_ENSURE_ARG(aLibXULDirectory);
 
   if (++sInitCounter > 1) // XXXbsmedberg is this really the right solution?
@@ -201,16 +207,17 @@ XRE_TermEmbedding()
     return;
 
   NS_ASSERTION(gDirServiceProvider,
                "XRE_TermEmbedding without XRE_InitEmbedding");
 
   gDirServiceProvider->DoShutdown();
   NS_ShutdownXPCOM(nullptr);
   delete gDirServiceProvider;
+  gStatisticsRecorder = nullptr;
 }
 
 const char*
 XRE_ChildProcessTypeToString(GeckoProcessType aProcessType)
 {
   return (aProcessType < GeckoProcessType_End) ?
     kGeckoProcessTypeString[aProcessType] : nullptr;
 }
