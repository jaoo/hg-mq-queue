# HG changeset patch
# Parent 03af9a5a25299804546f3adb32b2666c8053a11b
# User Jose Antonio Olivera Ortega <josea.olivera@gmail.com>
Bug 1099370 - Destroy remaining toolboxes and tabs after framework test has finished

diff --git a/browser/devtools/framework/test/browser_devtools_api.js b/browser/devtools/framework/test/browser_devtools_api.js
--- a/browser/devtools/framework/test/browser_devtools_api.js
+++ b/browser/devtools/framework/test/browser_devtools_api.js
@@ -177,16 +177,17 @@ function continueTests(toolbox, panel) {
       toolbox.off("select", selectListener);
       destroyToolbox(toolbox);
     }
   });
 }
 
 function destroyToolbox(toolbox) {
   toolbox.destroy().then(function() {
+    dump('toolbox.destroy() at destroyToolbox() at test browser_devtools_api.js\n');    
     let target = TargetFactory.forTab(gBrowser.selectedTab);
     ok(gDevTools._toolboxes.get(target) == null, "gDevTools doesn't know about target");
     ok(toolbox._target == null, "toolbox doesn't know about target.");
     finishUp();
   });
 }
 
 function finishUp() {
diff --git a/browser/devtools/framework/test/browser_devtools_api_destroy.js b/browser/devtools/framework/test/browser_devtools_api_destroy.js
--- a/browser/devtools/framework/test/browser_devtools_api_destroy.js
+++ b/browser/devtools/framework/test/browser_devtools_api_destroy.js
@@ -51,16 +51,17 @@ function runTests(aTab) {
       collectedEvents.push(event);
     });
 
     toolbox.once(toolDefinition.id + "-destroy", (event) => {
       collectedEvents.push("toolbox-" + event);
     });
 
     toolbox.destroy().then(function() {
+      dump('toolbox.destroy() at test() at test browser_devtools_api_destroy.js\n');
       is(collectedEvents.join(":"),
         "toolbox-destroy:destroy:gDevTools-testTool-destroy:toolbox-testTool-destroy",
         "Found the right amount of collected events.");
 
       gDevTools.unregisterTool(toolDefinition.id);
       gBrowser.removeCurrentTab();
 
       executeSoon(function() {
diff --git a/browser/devtools/framework/test/browser_new_activation_workflow.js b/browser/devtools/framework/test/browser_new_activation_workflow.js
--- a/browser/devtools/framework/test/browser_new_activation_workflow.js
+++ b/browser/devtools/framework/test/browser_new_activation_workflow.js
@@ -53,19 +53,22 @@ function testToggle() {
     target = TargetFactory.forTab(gBrowser.selectedTab);
     gDevTools.showToolbox(target, "styleeditor").then(function(aToolbox) {
       toolbox = aToolbox;
       is(toolbox.currentToolId, "styleeditor", "The style editor is selected");
       finishUp();
     });
   });
 
-  toolbox.destroy();
+  toolbox.destroy().then(function() {
+    dump('toolbox.destroy() at testToggle() at test browser_new_activation_workflow.js\n');
+  });
 }
 
 function finishUp() {
   toolbox.destroy().then(function() {
+    dump('toolbox.destroy() at finishup() at test browser_new_activation_workflow.js\n');
     toolbox = null;
     target = null;
     gBrowser.removeCurrentTab();
     finish();
   });
 }
diff --git a/browser/devtools/framework/test/browser_toolbox_dynamic_registration.js b/browser/devtools/framework/test/browser_toolbox_dynamic_registration.js
--- a/browser/devtools/framework/test/browser_toolbox_dynamic_registration.js
+++ b/browser/devtools/framework/test/browser_toolbox_dynamic_registration.js
@@ -94,13 +94,15 @@ function toolUnregistered(event, toolDef
     ok(!menuitem, "menu item removed from every browser window");
   }
 
   cleanup();
 }
 
 function cleanup()
 {
-  toolbox.destroy();
+  toolbox.destroy().then(() => {
+    dump('toolbox.destroy() at cleanup() at test browser_toolbox_dynamic_registration.js\n');
+  });
   toolbox = null;
   gBrowser.removeCurrentTab();
   finish();
 }
diff --git a/browser/devtools/framework/test/browser_toolbox_getpanelwhenready.js b/browser/devtools/framework/test/browser_toolbox_getpanelwhenready.js
--- a/browser/devtools/framework/test/browser_toolbox_getpanelwhenready.js
+++ b/browser/devtools/framework/test/browser_toolbox_getpanelwhenready.js
@@ -23,12 +23,14 @@ add_task(function*() {
   let debuggerPanel2 = yield toolbox.getPanelWhenReady("jsdebugger");
   is (debuggerPanel2, toolbox.getPanel("jsdebugger"),
       "The debugger panel from getPanelWhenReady after loading is the actual panel");
 
   yield cleanup();
 });
 
 function* cleanup() {
-  yield toolbox.destroy();
+  yield toolbox.destroy().then(() => {
+    dump('toolbox.destroy() at cleanup() at test browser_toolbox_getpanelwhenready.js\n');
+  });
   gBrowser.removeCurrentTab();
   toolbox = null;
 }
diff --git a/browser/devtools/framework/test/browser_toolbox_highlight.js b/browser/devtools/framework/test/browser_toolbox_highlight.js
--- a/browser/devtools/framework/test/browser_toolbox_highlight.js
+++ b/browser/devtools/framework/test/browser_toolbox_highlight.js
@@ -36,17 +36,18 @@ function test() {
                        .then(checkHighlighted.bind(null, TOOL_ID_1))
                        // Now unhighlight the tool
                        .then(unhighlightTab.bind(null, TOOL_ID_1))
                        // to see the classes gone.
                        .then(checkNoHighlight.bind(null, TOOL_ID_1))
                        // Now close the toolbox and exit.
                        .then(() => executeSoon(() => {
                           toolbox.destroy()
-                                 .then(() => {
+                           .then(() => {
+                                   dump('toolbox.destroy() at test() at test browser_toolbox_highlight.js\n');
                                    toolbox = null;
                                    gBrowser.removeCurrentTab();
                                    finish();
                                  });
                         }));
               });
   });
 }
diff --git a/browser/devtools/framework/test/browser_toolbox_hosts.js b/browser/devtools/framework/test/browser_toolbox_hosts.js
--- a/browser/devtools/framework/test/browser_toolbox_hosts.js
+++ b/browser/devtools/framework/test/browser_toolbox_hosts.js
@@ -82,16 +82,17 @@ function testToolSelect()
 {
   // make sure we can load a tool after switching hosts
   toolbox.selectTool("inspector").then(testDestroy);
 }
 
 function testDestroy()
 {
   toolbox.destroy().then(function() {
+    dump('toolbox.destroy() at testDestroy() at test browser_toolbox_hosts.js\n');    
     target = TargetFactory.forTab(gBrowser.selectedTab);
     gDevTools.showToolbox(target).then(testRememberHost);
   });
 }
 
 function testRememberHost(aToolbox)
 {
   toolbox = aToolbox;
@@ -118,13 +119,14 @@ function checkToolboxLoaded(iframe)
   ok(tabs, "toolbox UI has been loaded into iframe");
 }
 
 function cleanup()
 {
   Services.prefs.setCharPref("devtools.toolbox.host", Toolbox.HostType.BOTTOM);
 
   toolbox.destroy().then(function() {
+    dump('toolbox.destroy() at cleanup() at test browser_toolbox_hosts.js\n');    
     DevTools = Toolbox = toolbox = target = null;
     gBrowser.removeCurrentTab();
     finish();
   });
  }
diff --git a/browser/devtools/framework/test/browser_toolbox_options.js b/browser/devtools/framework/test/browser_toolbox_options.js
--- a/browser/devtools/framework/test/browser_toolbox_options.js
+++ b/browser/devtools/framework/test/browser_toolbox_options.js
@@ -261,15 +261,17 @@ function GetPref(name) {
       return Services.prefs.getBoolPref(name);
     default:
       throw new Error("Unknown type");
   }
 }
 
 function* cleanup() {
   gDevTools.unregisterTool("test-tool");
-  yield toolbox.destroy();
+  yield toolbox.destroy().then(() => {
+    dump('toolbox.destroy() at cleanup() at test browser_toolbox_options.js\n');
+  });
   gBrowser.removeCurrentTab();
   for (let pref of modifiedPrefs) {
     Services.prefs.clearUserPref(pref);
   }
   toolbox = doc = panelWin = modifiedPrefs = null;
 }
diff --git a/browser/devtools/framework/test/browser_toolbox_options_devedition.js b/browser/devtools/framework/test/browser_toolbox_options_devedition.js
--- a/browser/devtools/framework/test/browser_toolbox_options_devedition.js
+++ b/browser/devtools/framework/test/browser_toolbox_options_devedition.js
@@ -46,14 +46,16 @@ function clickAndWaitForThemeChange (el,
   });
 
   EventUtils.synthesizeMouseAtCenter(el, {}, win);
 
   return deferred.promise;
 }
 
 function* cleanup() {
-  yield toolbox.destroy();
+  yield toolbox.destroy().then(() => {
+    dump('toolbox.destroy() at cleanup() at test browser_toolbox_options_devedition.js\n');
+  });
   gBrowser.removeCurrentTab();
   Services.prefs.clearUserPref(PREF_ENABLED);
   Services.prefs.clearUserPref(PREF_SHOW);
   toolbox = doc = panelWin = null;
 }
diff --git a/browser/devtools/framework/test/browser_toolbox_options_disable_buttons.js b/browser/devtools/framework/test/browser_toolbox_options_disable_buttons.js
--- a/browser/devtools/framework/test/browser_toolbox_options_disable_buttons.js
+++ b/browser/devtools/framework/test/browser_toolbox_options_disable_buttons.js
@@ -132,16 +132,17 @@ function getBoolPref(key) {
 
 function toggleButton(node) {
   node.scrollIntoView();
   EventUtils.synthesizeMouseAtCenter(node, {}, panelWin);
 }
 
 function cleanup() {
   toolbox.destroy().then(function() {
+    dump('toolbox.destroy() at cleanup() at test browser_toolbox_disable_buttons.js\n');    
     gBrowser.removeCurrentTab();
     for (let pref of modifiedPrefs) {
       Services.prefs.clearUserPref(pref);
     }
     toolbox = doc = panelWin = modifiedPrefs = null;
     finish();
   });
 }
diff --git a/browser/devtools/framework/test/browser_toolbox_raise.js b/browser/devtools/framework/test/browser_toolbox_raise.js
--- a/browser/devtools/framework/test/browser_toolbox_raise.js
+++ b/browser/devtools/framework/test/browser_toolbox_raise.js
@@ -75,14 +75,15 @@ function onFocus() {
   // Now raise toolbox.
   toolbox.raise();
 }
 
 function cleanup() {
   Services.prefs.setCharPref("devtools.toolbox.host", Toolbox.HostType.BOTTOM);
 
   toolbox.destroy().then(function() {
+    dump('toolbox.destroy() at cleanup() at test browser_toolbox_raise.js\n');    
     DevTools = Toolbox = toolbox = target = null;
     gBrowser.removeCurrentTab();
     gBrowser.removeCurrentTab();
     finish();
   });
 }
diff --git a/browser/devtools/framework/test/browser_toolbox_ready.js b/browser/devtools/framework/test/browser_toolbox_ready.js
--- a/browser/devtools/framework/test/browser_toolbox_ready.js
+++ b/browser/devtools/framework/test/browser_toolbox_ready.js
@@ -30,12 +30,13 @@ function testDouble(toolbox)
     is(toolbox2, toolbox, "same toolbox");
     cleanup(toolbox);
   });
 }
 
 function cleanup(toolbox)
 {
   toolbox.destroy().then(function() {
+    dump('toolbox.destroy() at cleanup() at test browser_toolbox_ready.js\n');
     gBrowser.removeCurrentTab();
     finish();
   });
 }
diff --git a/browser/devtools/framework/test/browser_toolbox_select_event.js b/browser/devtools/framework/test/browser_toolbox_select_event.js
--- a/browser/devtools/framework/test/browser_toolbox_select_event.js
+++ b/browser/devtools/framework/test/browser_toolbox_select_event.js
@@ -85,14 +85,16 @@ function tidyUpIfAllCalled(id) {
     }
   }
 
   ok(true, "All the tools fired a {id}-selected event");
   tidyUp();
 }
 
 function tidyUp() {
-  toolbox.destroy();
+  toolbox.destroy().then(() => {
+    dump('toolbox.destroy() at tidyUp() at test browser_toolbox_select_event.js\n');
+  });
   gBrowser.removeCurrentTab();
 
   toolbox = null;
   finish();
 }
diff --git a/browser/devtools/framework/test/browser_toolbox_tabsswitch_shortcuts.js b/browser/devtools/framework/test/browser_toolbox_tabsswitch_shortcuts.js
--- a/browser/devtools/framework/test/browser_toolbox_tabsswitch_shortcuts.js
+++ b/browser/devtools/framework/test/browser_toolbox_tabsswitch_shortcuts.js
@@ -73,15 +73,16 @@ function onSelect(event, id) {
   // Execute soon to reset the stack trace.
   executeSoon(() => {
     testShortcuts(toolbox, idIndex + (reverse ? -1: 1));
   });
 }
 
 function tidyUp() {
   toolbox.destroy().then(function() {
+    dump('toolbox.destroy() at tidyUp() at test browser_toolbox_tabsswitch_shortcuts.js\n');    
     gBrowser.removeCurrentTab();
 
     toolbox = toolIDs = idIndex = Toolbox = secondTime = reverse = nextKey =
       prevKey = null;
     finish();
   });
 }
diff --git a/browser/devtools/framework/test/browser_toolbox_theme_registration.js b/browser/devtools/framework/test/browser_toolbox_theme_registration.js
--- a/browser/devtools/framework/test/browser_toolbox_theme_registration.js
+++ b/browser/devtools/framework/test/browser_toolbox_theme_registration.js
@@ -101,13 +101,14 @@ function testUnregister()
   target.client.attachTab(actor, (response) => {
     cleanup();
   });
 }
 
 function cleanup()
 {
   toolbox.destroy().then(function() {
+    dump('toolbox.destroy() at cleanup() at test browser_toolbox_theme_registration.js\n');
     toolbox = null;
     gBrowser.removeCurrentTab();
     finish();
   });
 }
diff --git a/browser/devtools/framework/test/browser_toolbox_tool_ready.js b/browser/devtools/framework/test/browser_toolbox_tool_ready.js
--- a/browser/devtools/framework/test/browser_toolbox_tool_ready.js
+++ b/browser/devtools/framework/test/browser_toolbox_tool_ready.js
@@ -22,17 +22,19 @@ function performChecks(target) {
       toolbox = yield gDevTools.showToolbox(target, toolId);
       ok(toolbox, "toolbox exists for " + toolId);
       is(toolbox.currentToolId, toolId, "currentToolId should be " + toolId);
 
       let panel = toolbox.getCurrentPanel();
       ok(panel.isReady, toolId + " panel should be ready");
     }
 
-    yield toolbox.destroy();
+    yield toolbox.destroy().then(() => {
+      dump('toolbox.destroy() at performChecks() at test browser_toolbox_tool_ready.js\n');
+    });
   });
 }
 
 function test() {
   Task.spawn(function() {
     toggleAllTools(true);
     let tab = yield addTab("about:blank");
     let target = TargetFactory.forTab(tab);
diff --git a/browser/devtools/framework/test/browser_toolbox_tool_remote_reopen.js b/browser/devtools/framework/test/browser_toolbox_tool_remote_reopen.js
--- a/browser/devtools/framework/test/browser_toolbox_tool_remote_reopen.js
+++ b/browser/devtools/framework/test/browser_toolbox_tool_remote_reopen.js
@@ -53,17 +53,19 @@ function runTools(target) {
       toolbox = yield gDevTools.showToolbox(target, toolId, "window");
       ok(toolbox, "toolbox exists for " + toolId);
       is(toolbox.currentToolId, toolId, "currentToolId should be " + toolId);
 
       let panel = toolbox.getCurrentPanel();
       ok(panel.isReady, toolId + " panel should be ready");
     }
 
-    yield toolbox.destroy();
+    yield toolbox.destroy().then(() => {
+      dump('toolbox.destroy() at runTools() at test browser_toolbox_tool_remote_reopen.js\n');
+    });
   });
 }
 
 function getClient() {
   let deferred = promise.defer();
 
   if (!DebuggerServer.initialized) {
     DebuggerServer.init();
diff --git a/browser/devtools/framework/test/browser_toolbox_transport_events.js b/browser/devtools/framework/test/browser_toolbox_transport_events.js
--- a/browser/devtools/framework/test/browser_toolbox_transport_events.js
+++ b/browser/devtools/framework/test/browser_toolbox_transport_events.js
@@ -21,16 +21,17 @@ function testResults(toolbox) {
   cleanUp(toolbox);
 }
 
 function cleanUp(toolbox) {
   gDevTools.off("toolbox-created", onToolboxCreated);
   off(DebuggerClient, "connect", onDebuggerClientConnect);
 
   toolbox.destroy().then(function() {
+    dump('toolbox.destroy() at cleanup() at test browser_toolbox_transport_events.js\n');
     gBrowser.removeCurrentTab();
     executeSoon(function() {
       finish();
     });
   });
 }
 
 function testPackets(sent, received) {
diff --git a/browser/devtools/framework/test/browser_toolbox_window_reload_target.js b/browser/devtools/framework/test/browser_toolbox_window_reload_target.js
--- a/browser/devtools/framework/test/browser_toolbox_window_reload_target.js
+++ b/browser/devtools/framework/test/browser_toolbox_window_reload_target.js
@@ -87,15 +87,16 @@ function testReload(key, docked, toolID,
   description = docked+" devtools with tool "+toolID+", key #" + key;
   info("Testing reload in "+description);
   synthesizeKeyForToolbox(key);
   reloadsSent++;
 }
 
 function finishUp() {
   toolbox.destroy().then(() => {
+    dump('toolbox.destroy() at finishUp() at test browser_toolbox_window_reload_target.js\n');
     gBrowser.removeCurrentTab();
-
+    
     target = toolbox = description = reloadsSent = toolIDs = null;
 
     finish();
   });
 }
diff --git a/browser/devtools/framework/test/browser_toolbox_window_shortcuts.js b/browser/devtools/framework/test/browser_toolbox_window_shortcuts.js
--- a/browser/devtools/framework/test/browser_toolbox_window_shortcuts.js
+++ b/browser/devtools/framework/test/browser_toolbox_window_shortcuts.js
@@ -64,16 +64,17 @@ function selectCB(event, id) {
   is(toolIDs.indexOf(id), idIndex,
      "Correct tool is selected on pressing the shortcut for " + id);
 
   testShortcuts(toolbox, idIndex + 1);
 }
 
 function tidyUp() {
   toolbox.destroy().then(function() {
+    dump('toolbox.destroy() at tidyUp() at test browser_toolbox_window_shortcuts.js\n');
     gBrowser.removeCurrentTab();
 
     for (let pref of modifiedPrefs) {
       Services.prefs.clearUserPref(pref);
     }
     toolbox = toolIDs = idIndex = modifiedPrefs = Toolbox = null;
     finish();
   });
diff --git a/browser/devtools/framework/test/browser_toolbox_window_title_changes.js b/browser/devtools/framework/test/browser_toolbox_window_title_changes.js
--- a/browser/devtools/framework/test/browser_toolbox_window_title_changes.js
+++ b/browser/devtools/framework/test/browser_toolbox_window_title_changes.js
@@ -45,28 +45,30 @@ function test() {
     // destroy toolbox, create new one hosted in a window (with a
     // different tool id), and check title
       .then(function () {
         // Give the tools a chance to handle the navigation event before
         // destroying the toolbox.
         executeSoon(function() {
           toolbox.destroy()
             .then(function () {
+              dump('toolbox.destroy() 1 at test() at test browser_toolbox_window_title_changes.js\n');
               // After destroying the toolbox, a fresh target is required.
               target = TargetFactory.forTab(gBrowser.selectedTab);
               return gDevTools.showToolbox(target, null, Toolbox.HostType.WINDOW);
             })
             .then(function (aToolbox) { toolbox = aToolbox; })
             .then(function () toolbox.selectTool(TOOL_ID_1))
             .then(checkTitle.bind(null, LABEL_1, URL_2,
                                   "toolbox destroyed and recreated"))
 
             // clean up
             .then(function () toolbox.destroy())
             .then(function () {
+              dump('toolbox.destroy() 2 at test() at test browser_toolbox_window_title_changes.js\n');
               toolbox = null;
               gBrowser.removeCurrentTab();
               Services.prefs.clearUserPref("devtools.toolbox.host");
               Services.prefs.clearUserPref("devtools.toolbox.selectedTool");
               Services.prefs.clearUserPref("devtools.toolbox.sideEnabled");
               finish();
             });
         });
diff --git a/browser/devtools/framework/test/browser_toolbox_zoom.js b/browser/devtools/framework/test/browser_toolbox_zoom.js
--- a/browser/devtools/framework/test/browser_toolbox_zoom.js
+++ b/browser/devtools/framework/test/browser_toolbox_zoom.js
@@ -49,14 +49,15 @@ function sendZoomKey(id, times) {
 
 function getCurrentZoom() {
   var contViewer = toolbox.frame.docShell.contentViewer;
   return contViewer.fullZoom;
 }
 
 function tidyUp() {
   toolbox.destroy().then(function() {
+    dump('toolbox.destroy() at tidyUp() at test browser_toolbox_zoom.js\n');
     gBrowser.removeCurrentTab();
 
     toolbox = modifiers = null;
     finish();
   });
 }
diff --git a/browser/devtools/framework/test/head.js b/browser/devtools/framework/test/head.js
--- a/browser/devtools/framework/test/head.js
+++ b/browser/devtools/framework/test/head.js
@@ -52,16 +52,17 @@ function addTab(url) {
   }, true);
   content.location = url;
 
   return def.promise;
 }
 
 registerCleanupFunction(function tearDown() {
   while (gBrowser.tabs.length > 1) {
+    dump('### ### At teardDown() gBrowser.removeCurrentTab() gets called!\n');
     gBrowser.removeCurrentTab();
   }
 });
 
 function synthesizeKeyFromKeyTag(aKeyId, document) {
   let key = document.getElementById(aKeyId);
   isnot(key, null, "Successfully retrieved the <key> node");
 
diff --git a/browser/devtools/profiler/test/browser_profiler_shared-connection-01.js b/browser/devtools/profiler/test/browser_profiler_shared-connection-01.js
--- a/browser/devtools/profiler/test/browser_profiler_shared-connection-01.js
+++ b/browser/devtools/profiler/test/browser_profiler_shared-connection-01.js
@@ -8,36 +8,47 @@
 let gProfilerConnections = 0;
 Services.obs.addObserver(profilerConnectionObserver, "profiler-connection-created", false);
 
 let test = Task.async(function*() {
   let firstTab = yield addTab(SIMPLE_URL);
   let firstTarget = TargetFactory.forTab(firstTab);
   yield firstTarget.makeRemote();
 
-  yield gDevTools.showToolbox(firstTarget, "webconsole");
+  let toolboxFirstTab;
+  yield gDevTools.showToolbox(firstTarget, "webconsole").then((aToolbox) => {
+    toolboxFirstTab = aToolbox;
+  });
+  
   is(gProfilerConnections, 1,
     "A shared profiler connection should have been created.");
 
   yield gDevTools.showToolbox(firstTarget, "jsprofiler");
   is(gProfilerConnections, 1,
     "No new profiler connections should have been created.");
 
   let secondTab = yield addTab(SIMPLE_URL);
   let secondTarget = TargetFactory.forTab(secondTab);
   yield secondTarget.makeRemote();
 
-  yield gDevTools.showToolbox(secondTarget, "jsprofiler");
+  let toolboxSecondTab;
+  yield gDevTools.showToolbox(secondTarget, "jsprofiler").then((aToolbox) => {
+    toolboxSecondTab = aToolbox;
+  });
+  
   is(gProfilerConnections, 2,
     "Only one new profiler connection should have been created.");
 
-  yield removeTab(firstTab);
-  yield removeTab(secondTab);
-
-  finish();
+  yield toolboxFirstTab.destroy().then(() => {
+    removeTab(firstTab);
+  });
+  yield toolboxSecondTab.destroy().then(() => {
+    removeTab(secondTab);
+    finish();
+  });
 });
 
 function profilerConnectionObserver(subject, topic, data) {
   is(topic, "profiler-connection-created", "The correct topic was observed.");
   gProfilerConnections++;
 }
 
 registerCleanupFunction(() => {
