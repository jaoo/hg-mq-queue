# HG changeset patch
# User Jose Antonio Olivera Ortega <jaoo@jaoo.es>
# Parent  865f5477902ad579ef8cc3595f866ecc1c1e525b
Bug 1153407 - browser_toolbox_options_enable_serviceworkers_testing.js breaks other tests, needs to be e10s. r=ochameau

diff --git a/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing.html b/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing.html
--- a/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing.html
+++ b/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing.html
@@ -31,39 +31,39 @@
           }
           swr.unregister().then(result => {
             result ? log("UnregistersCorrectly") : log("Error");
             button.click();
           });
         });
       }
 
-      navigator.serviceWorker.register("serviceworker.js").then(
-        swr => {
-          var msg = "";
-          var button = document.getElementById("button");
-          if (swr.installing) {
-            msg += "Installing worker/";
-          }
-          if (swr.waiting) {
-            msg += "Waiting worker/";
-          }
-          if (swr.active) {
-            msg += "Active worker/";
-          }
-          log(msg);
-          button.click();
-        },
-        error => {
-          var button = document.getElementById("button");
-          if (error.name === "SecurityError") {
-            log("SecurityError");
-          }
-          button.click();
-      });
+      <!-- navigator.serviceWorker.register("serviceworker.js").then( -->
+      <!--   swr => { -->
+      <!--     var msg = ""; -->
+      <!--     var button = document.getElementById("button"); -->
+      <!--     if (swr.installing) { -->
+      <!--       msg += "Installing worker/"; -->
+      <!--     } -->
+      <!--     if (swr.waiting) { -->
+      <!--       msg += "Waiting worker/"; -->
+      <!--     } -->
+      <!--     if (swr.active) { -->
+      <!--       msg += "Active worker/"; -->
+      <!--     } -->
+      <!--     log(msg); -->
+      <!--     button.click(); -->
+      <!--   }, -->
+      <!--   error => { -->
+      <!--     var button = document.getElementById("button"); -->
+      <!--     if (error.name === "SecurityError") { -->
+      <!--       log("SecurityError"); -->
+      <!--     } -->
+      <!--     button.click(); -->
+      <!-- }); -->
     </script>
   </head>
   <body>
     <h1>Test in page</h1>
     <input id="button"
            type="button"
            value="Worker clicks here"/>
     <br>
diff --git a/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing.js b/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing.js
--- a/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing.js
+++ b/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing.js
@@ -13,52 +13,70 @@ const FRAME_SCRIPT_URL =
   "browser_toolbox_options_enable_serviceworkers_testing_frame_script.js";
 
 const TEST_URI = URL_ROOT +
                  "browser_toolbox_options_enable_serviceworkers_testing.html";
 
 const ELEMENT_ID = "devtools-enable-serviceWorkersTesting";
 
 let toolbox;
-let doc;
+// let doc;
 
 function test() {
   // Note: Pref dom.serviceWorkers.testing.enabled is false since we are testing
   // the same capabilities are enabled with the devtool pref.
   SpecialPowers.pushPrefEnv({"set": [
     ["dom.serviceWorkers.exemptFromPerDomainMax", true],
     ["dom.serviceWorkers.enabled", true],
     ["dom.serviceWorkers.testing.enabled", false]
-  ]}, start);
+  ]}, init);
 }
 
-function start() {
+function init() {
   let tab = gBrowser.selectedTab = gBrowser.addTab();
   let target = TargetFactory.forTab(gBrowser.selectedTab);
   let linkedBrowser = tab.linkedBrowser;
 
   linkedBrowser.messageManager.loadFrameScript(COMMON_FRAME_SCRIPT_URL, false);
   linkedBrowser.messageManager.loadFrameScript(FRAME_SCRIPT_URL, false);
   gBrowser.selectedBrowser.addEventListener("load", function onLoad(evt) {
     gBrowser.selectedBrowser.removeEventListener(evt.type, onLoad, true);
-    doc = content.document;
+    // doc = content.document;
     gDevTools.showToolbox(target).then(testSelectTool);
   }, true);
 
   content.location = TEST_URI;
 }
 
 function testSelectTool(aToolbox) {
   toolbox = aToolbox;
   toolbox.once("options-selected", () => {
-    testRegisterFails().then(testRegisterInstallingWorker);
+    // testRegisterFails().then(start);
+    start();
   });
   toolbox.selectTool("options");
 }
 
+function register() {
+  return executeInContent("devtools:test:register");
+}
+
+function unregister(swr) {
+  return executeInContent("devtools:test:unregister");
+}
+
+function start() {
+  toggleServiceWorkersTestingCheckbox()
+    .then(register)
+    .then(unregister)
+    .catch(function(e) {
+      ok(false, "Some test failed with error " + e);
+    }).then(finishUp);
+}
+
 function testRegisterFails() {
   let deferred = promise.defer();
 
   function doTheCheck() {
     getNodeInfo("#output").then(output => {
       info("Testing it doesn't registers correctly until enable testing");
       is(output.textContent,
          "SecurityError",
@@ -111,17 +129,17 @@ function testRegisterFailsWhenToolboxClo
          .then(finishUp);
 }
 
 function reload() {
   let deferred = promise.defer();
 
   gBrowser.selectedBrowser.addEventListener("load", function onLoad(evt) {
     gBrowser.selectedBrowser.removeEventListener(evt.type, onLoad, true);
-    doc = content.document;
+    // doc = content.document;
     deferred.resolve();
   }, true);
 
   executeInContent("devtools:test:reload", {}, {}, false);
   return deferred.promise;
 }
 
 function testUnregister() {
@@ -159,11 +177,12 @@ function toggleServiceWorkersTestingChec
 
   cbx.click();
 
   return reload();
 }
 
 function finishUp() {
   gBrowser.removeCurrentTab();
-  toolbox = doc = null;
+  // toolbox = doc = null;
+  toolbox = null;
   finish();
 }
diff --git a/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing_frame_script.js b/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing_frame_script.js
--- a/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing_frame_script.js
+++ b/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing_frame_script.js
@@ -9,16 +9,30 @@ const {classes: Cc, interfaces: Ci, util
 const { devtools } = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 devtools.lazyImporter(this, "promise", "resource://gre/modules/Promise.jsm", "Promise");
 devtools.lazyImporter(this, "Task", "resource://gre/modules/Task.jsm", "Task");
 const loader = Cc["@mozilla.org/moz/jssubscript-loader;1"]
             .getService(Ci.mozIJSSubScriptLoader);
 let EventUtils = {};
 loader.loadSubScript("chrome://marionette/content/EventUtils.js", EventUtils);
 
+addMessageListener("devtools:test:register", function(msg) {
+  content.navigator.serviceWorker.register("serviceworker.js").then(swr => {
+    sendAsyncMessage("devtools:test:register");
+  });
+});
+
+addMessageListener("devtools:test:unregister", function(msg) {
+  content.navigator.serviceWorker.getRegistration().then(swr => {
+    swr.unregister().then(result => {
+      sendAsyncMessage("devtools:test:unregister");
+    });
+  });
+});
+
 addMessageListener("devtools:test:waitForSWMessage", function(msg) {
   let {selector} = msg.data;
   let node = superQuerySelector(selector);
 
   if (!node) {
     sendAsyncMessage("devtools:test:waitForSWMessage");
   }
   node.addEventListener('click', function onClick() {
