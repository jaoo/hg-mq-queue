# HG changeset patch
# User Jose Antonio Olivera Ortega <jaoo@jaoo.es>
# Parent  11650d005d39f58e0e46f46fe576c398bc0afac1
Bug 1171915 - about:serviceworkers in b2g should use originAttributes when calling ServiceWorkerManager. r=baku,fabrice

diff --git a/b2g/components/AboutServiceWorkers.jsm b/b2g/components/AboutServiceWorkers.jsm
--- a/b2g/components/AboutServiceWorkers.jsm
+++ b/b2g/components/AboutServiceWorkers.jsm
@@ -14,35 +14,34 @@ Cu.import("resource://gre/modules/XPCOMU
 XPCOMUtils.defineLazyModuleGetter(this, "SystemAppProxy",
                                   "resource://gre/modules/SystemAppProxy.jsm");
 
 XPCOMUtils.defineLazyServiceGetter(this, "gServiceWorkerManager",
                                   "@mozilla.org/serviceworkers/manager;1",
                                   "nsIServiceWorkerManager");
 
 function debug(aMsg) {
-  //dump("AboutServiceWorkers - " + aMsg + "\n");
+  // dump("AboutServiceWorkers - " + aMsg + "\n");
 }
 
 function serializeServiceWorkerInfo(aServiceWorkerInfo) {
   if (!aServiceWorkerInfo) {
     throw new Error("Invalid service worker information");
   }
 
   let result = {};
 
   Object.keys(aServiceWorkerInfo).forEach(property => {
     if (typeof aServiceWorkerInfo[property] == "function") {
       return;
     }
     if (property === "principal") {
       result.principal = {
         origin: aServiceWorkerInfo.principal.origin,
-        appId: aServiceWorkerInfo.principal.appId,
-        isInBrowser: aServiceWorkerInfo.principal.isInBrowser
+        originAttributes: aServiceWorkerInfo.principal.originAttributes
       };
       return;
     }
     result[property] = aServiceWorkerInfo[property];
   });
 
   return result;
 }
@@ -128,42 +127,46 @@ this.AboutServiceWorkers = {
       case "update":
         if (!message.scope) {
           self.sendError(message.id, "MissingScope");
           return;
         }
 
         if (!message.principal ||
             !message.principal.originAttributes) {
-          // XXX This will always error until bug 1171915 is fixed.
           self.sendError(message.id, "MissingOriginAttributes");
           return;
         }
 
-        gServiceWorkerManager.propagateSoftUpdate({},
-                                                  message.scope);
+        gServiceWorkerManager.propagateSoftUpdate(
+          message.principal.originAttributes,
+          message.scope
+        );
+
         self.sendResult(message.id, true);
         break;
 
       case "unregister":
         if (!message.principal ||
             !message.principal.origin ||
-            !message.principal.appId) {
-          self.sendError("MissingPrincipal");
+            !message.principal.originAttributes ||
+            !message.principal.originAttributes.appId ||
+            !message.principal.originAttributes.isInBrowser) {
+          self.sendError(message.id, "MissingPrincipal");
           return;
         }
 
         let principal = Services.scriptSecurityManager.getAppCodebasePrincipal(
           Services.io.newURI(message.principal.origin, null, null),
-          message.principal.appId,
-          message.principal.isInBrowser
+          message.principal.originAttributes.appId,
+          message.principal.originAttributes.isInBrowser
         );
 
         if (!message.scope) {
-          self.sendError("MissingScope");
+          self.sendError(message.id, "MissingScope");
           return;
         }
 
         let serviceWorkerUnregisterCallback = {
           unregisterSucceeded: function() {
             self.sendResult(message.id, true);
           },
 
