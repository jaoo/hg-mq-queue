# HG changeset patch
# Parent e6f472fd16c990a8aebadfc90439fcaeaa67c72d
# User Jose Antonio Olivera Ortega <josea.olivera@gmail.com>
Bug 1134329 - Service worker install and activate events not fired when updating the service worker javascript file. r=nsm

diff --git a/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing.js b/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing.js
--- a/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing.js
+++ b/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing.js
@@ -58,16 +58,67 @@ function testRegisterInstallingWorker() 
     let output = doc.getElementById("output");
     let button = doc.getElementById("button");
 
     function doTheCheck() {
       info("Testing it registers correctly and there is an installing worker");
       is(output.textContent,
          "Installing worker/",
          "Installing worker expected");
+      testRegisterActiveWorker();
+    }
+
+    if (output.textContent !== "No output") {
+      doTheCheck();
+    }
+
+    button.addEventListener('click', function onClick() {
+      button.addEventListener('click', onClick);
+      doTheCheck();
+    });
+  });
+}
+
+
+function testRegisterActiveWorker() {
+  reload().then(() => {
+    let output = doc.getElementById("output");
+    let button = doc.getElementById("button");
+
+    function doTheCheck() {
+      info("Testing it registers correctly and there are both an installing " +
+           "and an active worker");
+      is(output.textContent,
+         "Installing worker/Active worker/",
+         "Installing and active worker expected");
+      testRegisterWaitingWorker();
+    }
+
+    if (output.textContent !== "No output") {
+      doTheCheck();
+    }
+
+    button.addEventListener('click', function onClick() {
+      button.addEventListener('click', onClick);
+      doTheCheck();
+    });
+  });
+}
+
+function testRegisterWaitingWorker() {
+  reload().then(() => {
+    let output = doc.getElementById("output");
+    let button = doc.getElementById("button");
+
+    function doTheCheck() {
+      info("Testing it registers correctly and there are three worker: an " +
+           " installing, a wating and active worker");
+      is(output.textContent,
+         "Installing worker/Waiting worker/Active worker/",
+         "Installing, waiting and active worker expected");
       toggleServiceWorkersTestingCheckbox().then(finishUp);
     }
 
     if (output.textContent !== "No output") {
       doTheCheck();
     }
 
     button.addEventListener('click', function onClick() {
@@ -100,15 +151,30 @@ function toggleServiceWorkersTestingChec
   cbx.click();
 
   let mm = getFrameScript();
   mm.sendAsyncMessage("devtools:test:reload");
 
   return deferred.promise;
 }
 
+function reload() {
+  let deferred = promise.defer();
+
+  gBrowser.selectedBrowser.addEventListener("load", function onLoad(evt) {
+    gBrowser.selectedBrowser.removeEventListener(evt.type, onLoad, true);
+    doc = content.document;
+    deferred.resolve();
+  }, true);
+
+  let mm = getFrameScript();
+  mm.sendAsyncMessage("devtools:test:reload");
+
+  return deferred.promise;
+}
+
 function finishUp() {
   toolbox.destroy().then(function() {
     gBrowser.removeCurrentTab();
     toolbox = doc = null;
     finish();
   });
 }
diff --git a/dom/workers/ServiceWorkerManager.cpp b/dom/workers/ServiceWorkerManager.cpp
--- a/dom/workers/ServiceWorkerManager.cpp
+++ b/dom/workers/ServiceWorkerManager.cpp
@@ -447,16 +447,17 @@ class ServiceWorkerRegisterJob MOZ_FINAL
 {
   friend class ContinueInstallTask;
 
   nsCString mScope;
   nsCString mScriptSpec;
   nsRefPtr<ServiceWorkerRegistrationInfo> mRegistration;
   nsRefPtr<ServiceWorkerUpdateFinishCallback> mCallback;
   nsCOMPtr<nsIPrincipal> mPrincipal;
+  bool mAlwaysUpdate;
 
   ~ServiceWorkerRegisterJob()
   { }
 
   enum
   {
     REGISTER_JOB = 0,
     UPDATE_JOB = 1,
@@ -465,22 +466,24 @@ class ServiceWorkerRegisterJob MOZ_FINAL
 public:
   NS_DECL_ISUPPORTS
 
   // [[Register]]
   ServiceWorkerRegisterJob(ServiceWorkerJobQueue* aQueue,
                            const nsCString& aScope,
                            const nsCString& aScriptSpec,
                            ServiceWorkerUpdateFinishCallback* aCallback,
-                           nsIPrincipal* aPrincipal)
+                           nsIPrincipal* aPrincipal,
+                           bool aAlwaysUpdate)
     : ServiceWorkerJob(aQueue)
     , mScope(aScope)
     , mScriptSpec(aScriptSpec)
     , mCallback(aCallback)
     , mPrincipal(aPrincipal)
+    , mAlwaysUpdate(aAlwaysUpdate)
     , mJobType(REGISTER_JOB)
   { }
 
   // [[Update]]
   ServiceWorkerRegisterJob(ServiceWorkerJobQueue* aQueue,
                            ServiceWorkerRegistrationInfo* aRegistration,
                            ServiceWorkerUpdateFinishCallback* aCallback)
     : ServiceWorkerJob(aQueue)
@@ -501,18 +504,25 @@ public:
       swm->AppendPendingOperation(runnable);
       return;
     }
 
     if (mJobType == REGISTER_JOB) {
       mRegistration = swm->GetRegistration(mScope);
 
       if (mRegistration) {
+        bool alwaysUpdate = false;
+        if (mAlwaysUpdate ||
+	    Preferences::GetBool("dom.serviceWorkers.testing.enabled")) {
+          alwaysUpdate = true;
+        }
+
         nsRefPtr<ServiceWorkerInfo> newest = mRegistration->Newest();
-        if (newest && mScriptSpec.Equals(newest->ScriptSpec()) &&
+        if (!alwaysUpdate && newest &&
+            mScriptSpec.Equals(newest->ScriptSpec()) &&
             mScriptSpec.Equals(mRegistration->mScriptSpec)) {
           mRegistration->mPendingUninstall = false;
           Succeed();
           Done(NS_OK);
           return;
         }
       } else {
         mRegistration = swm->CreateNewRegistration(mScope, mPrincipal);
@@ -936,17 +946,22 @@ ServiceWorkerManager::Register(nsIDOMWin
 
   ServiceWorkerJobQueue* queue = GetOrCreateJobQueue(cleanedScope);
   MOZ_ASSERT(queue);
 
   nsRefPtr<ServiceWorkerResolveWindowPromiseOnUpdateCallback> cb =
     new ServiceWorkerResolveWindowPromiseOnUpdateCallback(window, promise);
 
   nsRefPtr<ServiceWorkerRegisterJob> job =
-    new ServiceWorkerRegisterJob(queue, cleanedScope, spec, cb, documentPrincipal);
+    new ServiceWorkerRegisterJob(queue,
+                                 cleanedScope,
+                                 spec,
+                                 cb,
+                                 documentPrincipal,
+                                 serviceWorkersTestingEnabled);
   queue->Append(job);
 
   promise.forget(aPromise);
   return NS_OK;
 }
 
 void
 ServiceWorkerManager::AppendPendingOperation(ServiceWorkerJobQueue* aQueue,
