# HG changeset patch
# User Alexandre Poirot <poirot.alex@gmail.com>

Bug 1161072 - Reset docshell state (disabled js/cache, service workers) from actor instead of client. r=jryans

diff --git a/browser/devtools/framework/test/browser_toolbox_custom_host.js b/browser/devtools/framework/test/browser_toolbox_custom_host.js
index 618f1aa..70ccabc 100644
--- a/browser/devtools/framework/test/browser_toolbox_custom_host.js
+++ b/browser/devtools/framework/test/browser_toolbox_custom_host.js
@@ -1,22 +1,14 @@
 /* vim: set ts=2 et sw=2 tw=80: */
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 
 function test() {
-  Cu.import("resource://gre/modules/Services.jsm");
-  let temp = {}
-  Cu.import("resource:///modules/devtools/gDevTools.jsm", temp);
-  let DevTools = temp.DevTools;
-  Cu.import("resource://gre/modules/devtools/LayoutHelpers.jsm", temp);
-  let LayoutHelpers = temp.LayoutHelpers;
-
-  Cu.import("resource://gre/modules/devtools/Loader.jsm", temp);
-  let devtools = temp.devtools;
+  let {devtools} = Cu.import("resource://gre/modules/devtools/Loader.jsm", {});
 
   let Toolbox = devtools.Toolbox;
 
   let toolbox, iframe, target, tab;
 
   gBrowser.selectedTab = gBrowser.addTab();
   target = TargetFactory.forTab(gBrowser.selectedTab);
 
@@ -35,24 +27,32 @@ function test() {
 
   content.location = "data:text/html,test custom host";
 
   function onMessage(event) {
     info("onMessage: " + event.data);
     let json = JSON.parse(event.data);
     if (json.name == "toolbox-close") {
       ok("Got the `toolbox-close` message");
+      window.removeEventListener("message", onMessage);
       cleanup();
     }
   }
 
-  function testCustomHost(toolbox) {
+  function testCustomHost(t) {
+    toolbox = t;
     is(toolbox.doc.defaultView.top, window, "Toolbox is included in browser.xul");
     is(toolbox.doc, iframe.contentDocument, "Toolbox is in the custom iframe");
     executeSoon(() => gBrowser.removeCurrentTab());
   }
 
   function cleanup() {
-    window.removeEventListener("message", onMessage);
     iframe.remove();
-    finish();
+
+    // Even if we received "toolbox-close", the toolbox may still be destroying
+    // toolbox.destroy() returns a singleton promise that ensures
+    // everything is cleaned up before proceeding.
+    toolbox.destroy().then(() => {
+      toolbox = iframe = target = tab = null;
+      finish();
+    });
   }
 }
diff --git a/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing.js b/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing.js
index 2530a4d..e0c3153 100644
--- a/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing.js
+++ b/browser/devtools/framework/test/browser_toolbox_options_enable_serviceworkers_testing.js
@@ -32,93 +32,112 @@ function start() {
     gDevTools.showToolbox(target).then(testSelectTool);
   }, true);
 
   content.location = TEST_URI;
 }
 
 function testSelectTool(aToolbox) {
   toolbox = aToolbox;
-  toolbox.once("options-selected", testRegisterFails);
+  toolbox.once("options-selected", () => {
+    testRegisterFails().then(testRegisterInstallingWorker);
+  });
   toolbox.selectTool("options");
 }
 
 function testRegisterFails() {
+  let deferred = promise.defer();
+
   let output = doc.getElementById("output");
   let button = doc.getElementById("button");
 
   function doTheCheck() {
     info("Testing it doesn't registers correctly until enable testing");
     is(output.textContent,
        "SecurityError",
        "SecurityError expected");
-    testRegisterInstallingWorker();
+    deferred.resolve();
   }
 
   if (output.textContent !== "No output") {
     doTheCheck();
   }
 
   button.addEventListener('click', function onClick() {
     button.removeEventListener('click', onClick);
     doTheCheck();
   });
+
+  return deferred.promise;
 }
 
 function testRegisterInstallingWorker() {
   toggleServiceWorkersTestingCheckbox().then(() => {
     let output = doc.getElementById("output");
     let button = doc.getElementById("button");
 
     function doTheCheck() {
       info("Testing it registers correctly and there is an installing worker");
       is(output.textContent,
          "Installing worker/",
          "Installing worker expected");
-      toggleServiceWorkersTestingCheckbox().then(finishUp);
+      testRegisterFailsWhenToolboxCloses();
     }
 
     if (output.textContent !== "No output") {
       doTheCheck();
     }
 
     button.addEventListener('click', function onClick() {
       button.removeEventListener('click', onClick);
       doTheCheck();
     });
   });
 }
 
+// Workers should be turned back off when we closes the toolbox
+function testRegisterFailsWhenToolboxCloses() {
+  info("Testing it disable worker when closing the toolbox");
+  toolbox.destroy()
+         .then(reload)
+         .then(testRegisterFails)
+         .then(finishUp);
+}
+
+function reload() {
+  let deferred = promise.defer();
+
+  gBrowser.selectedBrowser.addEventListener("load", function onLoad(evt) {
+    gBrowser.selectedBrowser.removeEventListener(evt.type, onLoad, true);
+    doc = content.document;
+    deferred.resolve();
+  }, true);
+
+  let mm = getFrameScript();
+  mm.sendAsyncMessage("devtools:test:reload");
+
+  return deferred.promise;
+}
+
 function toggleServiceWorkersTestingCheckbox() {
   let deferred = promise.defer();
 
   let panel = toolbox.getCurrentPanel();
   let cbx = panel.panelDoc.getElementById(ELEMENT_ID);
 
   cbx.scrollIntoView();
 
   if (cbx.checked) {
     info("Clearing checkbox to disable service workers testing");
   } else {
     info("Checking checkbox to enable service workers testing");
   }
 
-  gBrowser.selectedBrowser.addEventListener("load", function onLoad(evt) {
-    gBrowser.selectedBrowser.removeEventListener(evt.type, onLoad, true);
-    doc = content.document;
-    deferred.resolve();
-  }, true);
-
   cbx.click();
 
-  let mm = getFrameScript();
-  mm.sendAsyncMessage("devtools:test:reload");
-
-  return deferred.promise;
+  return reload();
 }
 
 function finishUp() {
-  toolbox.destroy().then(function() {
-    gBrowser.removeCurrentTab();
-    toolbox = doc = null;
-    finish();
-  });
+  gBrowser.removeCurrentTab();
+  toolbox = doc = null;
+  finish();
 }
diff --git a/browser/devtools/framework/toolbox-options.js b/browser/devtools/framework/toolbox-options.js
index 07840b2..b9fc8db 100644
--- a/browser/devtools/framework/toolbox-options.js
+++ b/browser/devtools/framework/toolbox-options.js
@@ -311,18 +311,18 @@ OptionsPanel.prototype = {
       }
       menulist.addEventListener("command", function() {
         setPrefAndEmit(this.getAttribute("data-pref"), this.value);
       }.bind(menulist));
     }
 
     if (this.target.activeTab) {
       this.target.client.attachTab(this.target.activeTab._actor, (response) => {
-        this._origJavascriptEnabled = response.javascriptEnabled;
-        this.disableJSNode.checked = !this._origJavascriptEnabled;
+        this._origJavascriptEnabled = !response.javascriptEnabled;
+        this.disableJSNode.checked = this._origJavascriptEnabled;
         this.disableJSNode.addEventListener("click", this._disableJSClicked, false);
       });
     } else {
       this.disableJSNode.hidden = true;
     }
   },
 
   updateDefaultTheme: function() {
@@ -364,36 +364,36 @@ OptionsPanel.prototype = {
     this.target.activeTab.reconfigure(options);
   },
 
   destroy: function() {
     if (this.destroyPromise) {
       return this.destroyPromise;
     }
 
-    let deferred = promise.defer();
+    this.destroyPromise = promise.resolve();
 
-    this.destroyPromise = deferred.promise;
     this._removeListeners();
 
     if (this.target.activeTab) {
-      this.disableJSNode.removeEventListener("click", this._disableJSClicked, false);
-      // If JavaScript is disabled we need to revert it to it's original value.
-      let options = {
-        "javascriptEnabled": this._origJavascriptEnabled
-      };
-      this.target.activeTab.reconfigure(options, () => {
-        this.toolbox = null;
-        deferred.resolve();
-      }, true);
+      this.disableJSNode.removeEventListener("click", this._disableJSClicked);
+      // FF40+ automatically cleans up state in actor on disconnect
+      if (!this.target.activeTab.traits.actorsCleanup) {
+        let options = {
+          "javascriptEnabled": this._origJavascriptEnabled
+        };
+        let deferred = promise.defer();
+        this.destroyPromise = deferred.promise;
+        this.target.activeTab.reconfigure(options, deferred.resolve);
+      }
     }
 
-    this.panelWin = this.panelDoc = this.disableJSNode = null;
+    this.panelWin = this.panelDoc = this.disableJSNode = this.toolbox = null;
 
-    return deferred.promise;
+    return this.destroyPromise;
   }
 };
 
 /* Set a pref and emit the pref-changed event if needed. */
 function setPrefAndEmit(prefName, newValue) {
   let data = {
     pref: prefName,
     newValue: newValue
diff --git a/browser/devtools/framework/toolbox.js b/browser/devtools/framework/toolbox.js
index 2b02ef7..9dcd02d 100644
--- a/browser/devtools/framework/toolbox.js
+++ b/browser/devtools/framework/toolbox.js
@@ -1736,17 +1736,18 @@ Toolbox.prototype = {
       } catch (e) {
         // We don't want to stop here if any panel fail to close.
         console.error("Panel " + id + ":", e);
       }
     }
 
     // Now that we are closing the toolbox we can re-enable the cache settings
     // and disable the service workers testing settings for the current tab.
-    if (this.target.activeTab) {
+    // FF40+ automatically cleans up state in actor on disconnect.
+    if (this.target.activeTab && !this.target.activeTab.traits.actorsCleanup) {
       this.target.activeTab.reconfigure({
         "cacheDisabled": false,
         "serviceWorkersTestingEnabled": false
       });
     }
 
     // Destroying the walker and inspector fronts
     outstanding.push(this.destroyInspector().then(() => {
diff --git a/browser/devtools/styleeditor/styleeditor-panel.js b/browser/devtools/styleeditor/styleeditor-panel.js
index 33d0467..fa0115e 100644
--- a/browser/devtools/styleeditor/styleeditor-panel.js
+++ b/browser/devtools/styleeditor/styleeditor-panel.js
@@ -126,21 +126,23 @@ StyleEditorPanel.prototype = {
    */
   destroy: function() {
     if (!this._destroyed) {
       this._destroyed = true;
 
       this._target.off("close", this.destroy);
       this._target = null;
       this._toolbox = null;
+      this._panelWin = null;
       this._panelDoc = null;
       this._debuggee.destroy();
       this._debuggee = null;
 
       this.UI.destroy();
+      this.UI = null;
     }
 
     return promise.resolve(null);
   },
 }
 
 XPCOMUtils.defineLazyGetter(StyleEditorPanel.prototype, "strings",
   function () {
diff --git a/toolkit/devtools/server/actors/webbrowser.js b/toolkit/devtools/server/actors/webbrowser.js
index 5785c53..1879617 100644
--- a/toolkit/devtools/server/actors/webbrowser.js
+++ b/toolkit/devtools/server/actors/webbrowser.js
@@ -1254,16 +1254,17 @@ TabActor.prototype = {
     if (!this.attached) {
       return false;
     }
 
     // Check for docShell availability, as it can be already gone
     // during Firefox shutdown.
     if (this.docShell) {
       this._progressListener.unwatch(this.docShell);
+      this._restoreDocumentSettings();
     }
     if (this._progressListener) {
       this._progressListener.destroy();
       this._progressListener = null;
       this._originalWindow = null;
 
       // Removes the observers being set in _watchDocShells
       if (this.listenForNewDocShells) {
@@ -1344,17 +1345,22 @@ TabActor.prototype = {
   },
 
   /**
    * Reconfigure options.
    */
   onReconfigure: function (aRequest) {
     let options = aRequest.options || {};
 
+    if (!this.docShell) {
+      // The tab is already closed.
+      return {};
+    }
     this._toggleDevtoolsSettings(options);
+
     return {};
   },
 
   /**
    * Handle logic to enable/disable JS/cache/Service Worker testing.
    */
   _toggleDevtoolsSettings: function(options) {
     // Wait a tick so that the response packet can be dispatched before the
@@ -1384,46 +1390,73 @@ TabActor.prototype = {
     let hasExplicitReloadFlag = "performReload" in options;
     if ((hasExplicitReloadFlag && options.performReload) ||
        (!hasExplicitReloadFlag && reload)) {
       this.onReload();
     }
   },
 
   /**
+   * Opposite of the _toggleDevtoolsSettings method, that reset document state
+   * when closing the toolbox.
+   */
+  _restoreDocumentSettings: function () {
+    this._restoreJavascript();
+    this._setCacheDisabled(false);
+    this._setServiceWorkersTestingEnabled(false);
+  },
+
+  /**
    * Disable or enable the cache via docShell.
    */
   _setCacheDisabled: function(disabled) {
     let enable =  Ci.nsIRequest.LOAD_NORMAL;
     let disable = Ci.nsIRequest.LOAD_BYPASS_CACHE |
                   Ci.nsIRequest.INHIBIT_CACHING;
 
-    if (this.docShell) {
-      this.docShell.defaultLoadFlags = disabled ? disable : enable;
-    }
+    this.docShell.defaultLoadFlags = disabled ? disable : enable;
   },
 
   /**
    * Disable or enable JS via docShell.
    */
+  _wasJavascriptEnabled: null,
   _setJavascriptEnabled: function(allow) {
-    if (this.docShell) {
-      this.docShell.allowJavascript = allow;
+    if (this._wasJavascriptEnabled === null) {
+      this._wasJavascriptEnabled = this.docShell.allowJavascript;
     }
+    this.docShell.allowJavascript = allow;
+  },
+
+  /**
+   * Restore JS state, before the actor modified it.
+   */
+  _restoreJavascript: function () {
+    if (this._wasJavascriptEnabled !== null) {
+      this._setJavascriptEnabled(this._wasJavascriptEnabled);
+      this._wasJavascriptEnabled = null;
+    }
+  },
+
+  /**
+   * Return JS allowed status.
+   */
+  _getJavascriptEnabled: function() {
+    if (!this.docShell) {
+      // The tab is already closed.
+      return null;
+    }
+
+    return this.docShell.allowJavascript;
   },
 
   /**
    * Disable or enable the service workers testing features.
    */
   _setServiceWorkersTestingEnabled: function(enabled) {
-    if (!this.docShell) {
-      // The tab is already closed.
-      return null;
-    }
-
     let windowUtils = this.window.QueryInterface(Ci.nsIInterfaceRequestor)
                                  .getInterface(Ci.nsIDOMWindowUtils);
     windowUtils.serviceWorkersTestingEnabled = enabled;
   },
 
   /**
    * Return cache allowed status.
    */
@@ -1434,28 +1467,16 @@ TabActor.prototype = {
     }
 
     let disable = Ci.nsIRequest.LOAD_BYPASS_CACHE |
                   Ci.nsIRequest.INHIBIT_CACHING;
     return this.docShell.defaultLoadFlags === disable;
   },
 
   /**
-   * Return JS allowed status.
-   */
-  _getJavascriptEnabled: function() {
-    if (!this.docShell) {
-      // The tab is already closed.
-      return null;
-    }
-
-    return this.docShell.allowJavascript;
-  },
-
-  /**
    * Return service workers testing allowed status.
    */
   _getServiceWorkersTestingEnabled: function() {
     if (!this.docShell) {
       // The tab is already closed.
       return null;
     }
